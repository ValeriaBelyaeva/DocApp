package com.example.docapp

import android.content.Context
import androidx.test.core.app.ApplicationProvider
import com.example.docapp.core.DatabaseEncryption
import org.junit.Test
import org.junit.Assert.*
import org.junit.Before
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.robolectric.annotation.Config

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
 */
@RunWith(RobolectricTestRunner::class)
@Config(sdk = [28])
class EncryptionTest {
    
    private lateinit var context: Context
    private lateinit var encryption: DatabaseEncryption
    
    @Before
    fun setUp() {
        context = ApplicationProvider.getApplicationContext()
        encryption = DatabaseEncryption(context)
    }
    
    @Test
    fun testEncryptionCreation() {
        assertNotNull("DatabaseEncryption –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω", encryption)
    }
    
    @Test
    fun testStringEncryptionDecryption() {
        val originalText = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
        
        // –®–∏—Ñ—Ä—É–µ–º
        val encrypted = encryption.encryptString(originalText)
        assertNotNull("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null", encrypted)
        assertNotEquals("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞", originalText, encrypted)
        
        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        val decrypted = encryption.decryptString(encrypted)
        assertNotNull("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null", decrypted)
        assertEquals("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", originalText, decrypted)
    }
    
    @Test
    fun testEmptyStringEncryption() {
        val emptyString = ""
        
        val encrypted = encryption.encryptString(emptyString)
        assertEquals("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π", emptyString, encrypted)
        
        val decrypted = encryption.decryptString(encrypted)
        assertEquals("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π", emptyString, decrypted)
    }
    
    @Test
    fun testBytesEncryptionDecryption() {
        val originalBytes = "–¢–µ—Å—Ç–æ–≤—ã–µ –±–∞–π—Ç—ã".toByteArray(Charsets.UTF_8)
        
        // –®–∏—Ñ—Ä—É–µ–º
        val encrypted = encryption.encryptBytes(originalBytes)
        assertNotNull("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å null", encrypted)
        
        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        val decrypted = encryption.decryptBytes(encrypted)
        assertNotNull("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å null", decrypted)
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        assertArrayEquals("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", originalBytes, decrypted)
    }
    
    @Test
    fun testMultipleEncryptionsProduceDifferentResults() {
        val text = "–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        
        val encrypted1 = encryption.encryptString(text)
        val encrypted2 = encryption.encryptString(text)
        
        // –ò–∑-–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ IV —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        assertNotEquals("–î–≤–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
            encrypted1, encrypted2)
        
        // –ù–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        val decrypted1 = encryption.decryptString(encrypted1)
        val decrypted2 = encryption.decryptString(encrypted2)
        
        assertEquals("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", decrypted1, decrypted2)
        assertEquals("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", text, decrypted1)
    }
    
    @Test
    fun testSpecialCharactersEncryption() {
        val specialText = "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: !@#$%^&*()_+-=[]{}|;':\",./<>?`~"
        
        val encrypted = encryption.encryptString(specialText)
        val decrypted = encryption.decryptString(encrypted)
        
        assertEquals("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å—Å—è", specialText, decrypted)
    }
    
    @Test
    fun testUnicodeEncryption() {
        val unicodeText = "Unicode —Ç–µ–∫—Å—Ç: üöÄüîíüíæüì±‚≠ê"
        
        val encrypted = encryption.encryptString(unicodeText)
        val decrypted = encryption.decryptString(encrypted)
        
        assertEquals("Unicode —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å—Å—è", unicodeText, decrypted)
    }
    
    @Test
    fun testLongTextEncryption() {
        val longText = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ".repeat(1000)
        
        val encrypted = encryption.encryptString(longText)
        val decrypted = encryption.decryptString(encrypted)
        
        assertEquals("–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å—Å—è", longText, decrypted)
    }
}
