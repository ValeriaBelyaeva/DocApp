package com.example.docapp.core

import android.content.Context
import android.net.Uri
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.Toast
import com.example.docapp.BuildConfig
import java.io.File
import java.io.FileWriter
import java.io.PrintWriter
import java.io.StringWriter
import java.text.SimpleDateFormat
import java.util.*

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ª–∞–¥–∫–∏
 */

// ===== LOGGING =====

object AppLogger {
    private var context: Context? = null
    private var logFile: File? = null
    private val dateFormat = SimpleDateFormat("HH:mm:ss.SSS", Locale.getDefault())
    
    fun init(ctx: Context) {
        context = ctx
        try {
            logFile = File(ctx.getExternalFilesDir(null), "app_logs.txt")
            log("AppLogger", "Logger initialized")
        } catch (e: Exception) {
            Log.e("AppLogger", "Failed to initialize logger: ${e.message}")
        }
    }
    
    fun log(tag: String, message: String) {
        val timestamp = dateFormat.format(Date())
        val logMessage = "[$timestamp] $tag: $message"
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ Android Log
        Log.i(tag, message)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try {
            logFile?.let { file ->
                FileWriter(file, true).use { writer ->
                    writer.appendLine(logMessage)
                }
            }
        } catch (e: Exception) {
            Log.e("AppLogger", "Failed to write to log file: ${e.message}")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        if (message.contains("ERROR") || message.contains("FAILED") || message.contains("CRITICAL")) {
            context?.let { ctx ->
                val toastMessage = message.replace("ERROR: ", "").replace("FAILED: ", "").replace("CRITICAL: ", "")
                Toast.makeText(ctx, toastMessage, Toast.LENGTH_LONG).show()
            }
        }
    }
    
    fun getLogFile(): File? = logFile
}

// ===== ERROR HANDLING =====

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
 */
object ErrorHandler {
    
    // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
    private const val DEBUG_MODE = false
    
    private var context: Context? = null
    private val handler = Handler(Looper.getMainLooper())
    
    fun init(ctx: Context) {
        context = ctx
        setupUncaughtExceptionHandler()
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Toast
     */
    fun showError(message: String, throwable: Throwable? = null) {
        val errorMessage = formatErrorMessage(message, throwable)
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        AppLogger.log("ErrorHandler", "ERROR: $errorMessage")
        if (throwable != null) {
            AppLogger.log("ErrorHandler", "Stack trace: ${getStackTrace(throwable)}")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
        if (DEBUG_MODE) {
            showToast(errorMessage, Toast.LENGTH_LONG)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
     */
    fun showCriticalError(message: String, throwable: Throwable? = null) {
        val errorMessage = formatErrorMessage(message, throwable)
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        AppLogger.log("ErrorHandler", "CRITICAL ERROR: $errorMessage")
        if (throwable != null) {
            AppLogger.log("ErrorHandler", "Stack trace: ${getStackTrace(throwable)}")
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
        if (DEBUG_MODE) {
            showToast(errorMessage, Toast.LENGTH_LONG)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
     */
    fun showWarning(message: String) {
        AppLogger.log("ErrorHandler", "WARNING: $message")
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Toast –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    fun showSuccess(message: String) {
        AppLogger.log("ErrorHandler", "SUCCESS: $message")
        if (DEBUG_MODE) {
            showToast(message, Toast.LENGTH_SHORT)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
     */
    fun showInfo(message: String) {
        AppLogger.log("ErrorHandler", "INFO: $message")
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Toast –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    private fun formatErrorMessage(message: String, throwable: Throwable?): String {
        return if (throwable != null) {
            "$message: ${throwable.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}"
        } else {
            message
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    private fun getStackTrace(throwable: Throwable): String {
        val sw = StringWriter()
        val pw = PrintWriter(sw)
        throwable.printStackTrace(pw)
        return sw.toString()
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Toast —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private fun showToast(message: String, duration: Int) {
        context?.let { ctx ->
            handler.post {
                Toast.makeText(ctx, message, duration).show()
            }
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    private fun setupUncaughtExceptionHandler() {
        Thread.setDefaultUncaughtExceptionHandler { thread, throwable ->
            try {
                AppLogger.log("ErrorHandler", "UNCAUGHT EXCEPTION on thread ${thread.name}: ${throwable.message}")
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å
                AppLogger.log("ErrorHandler", "Stack trace: ${getStackTrace(throwable)}")
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
                if (DEBUG_MODE) {
                    context?.let { ctx ->
                        handler.post {
                            val errorMessage = throwable.message ?: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"
                            Toast.makeText(ctx, errorMessage, Toast.LENGTH_LONG).show()
                        }
                    }
                }
                
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                // Crashlytics.recordException(throwable)
            } catch (e: Exception) {
                // –ï—Å–ª–∏ –¥–∞–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                android.util.Log.e("ErrorHandler", "Failed to handle uncaught exception", e)
            }
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            System.exit(1)
        }
        AppLogger.log("ErrorHandler", "Global uncaught exception handler initialized")
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    fun <T> safeExecute(action: () -> T?): T? {
        return try {
            action()
        } catch (e: Exception) {
            showError("", e)
            null
        }
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ suspend —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    suspend fun <T> safeExecuteSuspend(action: suspend () -> T?): T? {
        return try {
            action()
        } catch (e: Exception) {
            showError("", e)
            null
        }
    }
}

// ===== URI DEBUGGING =====

/**
 * –î–µ–±–∞–≥ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å URI
 */
object UriDebugger {
    
    private var context: Context? = null
    private var isDebugEnabled = false
    
    fun init(ctx: Context) {
        context = ctx
        // –í–∫–ª—é—á–∞–µ–º –¥–µ–±–∞–≥ —Ç–æ–ª—å–∫–æ –≤ debug —Å–±–æ—Ä–∫–µ
        isDebugEnabled = BuildConfig.DEBUG
    }
    
    fun showUriDebug(message: String, uri: Uri? = null) {
        if (!isDebugEnabled) return
        
        context?.let { ctx ->
            Toast.makeText(ctx, "üîç $message", Toast.LENGTH_SHORT).show()
            if (uri != null) {
                Toast.makeText(ctx, "üìÅ $uri", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    fun showUriError(message: String, uri: Uri? = null, throwable: Throwable? = null) {
        if (!isDebugEnabled) return
        
        context?.let { ctx ->
            Toast.makeText(ctx, "‚ùå $message", Toast.LENGTH_SHORT).show()
            if (uri != null) {
                Toast.makeText(ctx, "üìÅ $uri", Toast.LENGTH_SHORT).show()
            }
            if (throwable != null) {
                Toast.makeText(ctx, "üí• ${throwable.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    fun showUriSuccess(message: String, uri: Uri? = null) {
        if (!isDebugEnabled) return
        
        context?.let { ctx ->
            Toast.makeText(ctx, "‚úÖ $message", Toast.LENGTH_SHORT).show()
            if (uri != null) {
                Toast.makeText(ctx, "üìÅ $uri", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    fun enableDebug() {
        isDebugEnabled = true
    }
    
    fun disableDebug() {
        isDebugEnabled = false
    }
}

// ===== UTILITY FUNCTIONS =====

fun newId(): String = UUID.randomUUID().toString()
fun now(): Long = System.currentTimeMillis()
